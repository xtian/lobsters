#!/usr/bin/env ruby
# frozen_string_literal: true

ENV['RAILS_ENV'] ||= 'production'

APP_PATH = File.expand_path('../config/application', __dir__)
require File.expand_path('../config/boot', __dir__)
require APP_PATH
Rails.application.require_environment!

TWITTER_LIST = 'users'

# find the id of our list name
res = Twitter.oauth_request('/1.1/lists/list.json', :get)
our_list = res.select { |l| l['name'] == TWITTER_LIST }.first
raise "can't find list #{TWITTER_LIST.inspect} in #{res.inspect}" if our_list.blank?
list_id = our_list['id_str']

# fetch its member list
res = Twitter.oauth_request("/1.1/lists/members.json?list_id=#{list_id}" \
  '&count=5000&skip_status=true', :get)
their_users = res['users'].map { |u| [u['screen_name'].downcase, true] }.to_h

raise "Intemittent Twitter bug: they said the list is empty when it's not" if their_users.empty?
STDERR.puts 'need to implement paging for list members' if their_users.count >= 5000

# fetch our active users that have a linked twitter account
our_users = User.active.where("settings LIKE '%twitter_username:%'")
  .select { |u| u.twitter_username.present? }
  .map { |u| [u.twitter_username.downcase, true] }.to_h

# ignore users that have previously been determined to have protected accounts,
# which cannot be added to a public list
Keystore.where("`key` LIKE 'user:%:twitter_private'").each do |ks|
  our_users.reject! do |k, _v|
    k.casecmp(ks.key.scan(/:(.+):/).first.first).zero?
  end
end

# diff
to_add = our_users.keys.reject { |u| their_users[u] }
to_del = their_users.keys.reject { |u| our_users[u] }

to_add.each_slice(100) do |g|
  # lookup and remove any protected users
  Twitter.oauth_request("/1.1/users/lookup.json?screen_name=#{g.join(',')}")
    .select { |u| u['protected'] }.each do |u|
    # puts "user #{u["screen_name"]} protected, ignoring"
    Keystore.put("user:#{u['screen_name']}:twitter_private", 1)

    g.reject! { |tu| tu.casecmp(u['screen_name']).zero? }
  end

  next if g.none?

  # puts "adding: #{g.inspect}"

  begin
    Twitter.oauth_request(
      '/1.1/lists/members/create_all.json',
      :post,
      'list_id' => list_id,
      'screen_name' => g.join(',')
    )
  rescue Net::OpenTimeout # Twitter's having a nap
    exit
  end
end

to_del.each_slice(100) do |g|
  # puts "deleting: #{g.inspect}"

  Twitter.oauth_request(
    '/1.1/lists/members/destroy_all.json',
    :post,
    'list_id' => list_id,
    'screen_name' => g.join(',')
  )
end
